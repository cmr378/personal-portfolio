---
--- <!-- Close empty frontmatter properly in Astro -->

<!-- Parent div uses relative positioning so canvas can be absolutely positioned inside -->
<div class="w-full h-full relative">
  <canvas id="matrixCanvas" class="absolute top-0 left-0 w-full h-full"></canvas>
</div>

<!-- Load jQuery inline so Astro doesnâ€™t try to SSR it -->
<script
  src="https://code.jquery.com/jquery-3.3.1.min.js"
  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"
  is:inline
></script>

<!-- Mark your script as client:load so it only runs in the browser -->
<script client:load is:inline>
  $(function() {
    let audioCtx; 
    document.addEventListener('click', initAudio, { once: true });

    function initAudio() {
      audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    }

    // Select the canvas and context
    const canvas = document.querySelector('#matrixCanvas'); // Ensure it only affects this component
    const ctx = canvas.getContext('2d');

    // Dynamically size the canvas to its parent container
    function resizeCanvas() {
      canvas.width = canvas.clientWidth;
      canvas.height = canvas.clientHeight;
    }
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    ctx.lineWidth = 0.3;
    ctx.strokeStyle = (new Color(150)).style;

    // Mouse position relative to the canvas
    let mousePosition = { x: 0, y: 0 };

    // Dot settings
    const dots = {
      nb: 500,        // You can lower the number if the area is smaller
      distance: 100,
      d_radius: 50,
      array: []
    };

    function colorValue(min = 0) {
      return Math.floor(Math.random() * 255 + min);
    }

    function createColorStyle(r, g, b) {
      return `rgba(${r},${g},${b},0.8)`;
    }

    function mixComponents(comp1, weight1, comp2, weight2) {
      return (comp1 * weight1 + comp2 * weight2) / (weight1 + weight2);
    }

    function averageColorStyles(dot1, dot2) {
      const color1 = dot1.color;
      const color2 = dot2.color;
      const r = mixComponents(color1.r, dot1.radius, color2.r, dot2.radius);
      const g = mixComponents(color1.g, dot1.radius, color2.g, dot2.radius);
      const b = mixComponents(color1.b, dot1.radius, color2.b, dot2.radius);
      return createColorStyle(Math.floor(r), Math.floor(g), Math.floor(b));
    }

    function Color(min) {
      this.r = colorValue(min);
      this.g = colorValue(min);
      this.b = colorValue(min);
      this.style = createColorStyle(this.r, this.g, this.b);
    }

    function Dot() {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.vx = -0.5 + Math.random();
      this.vy = -0.5 + Math.random();
      this.radius = Math.random() * 2;
      this.color = new Color();
      this.wasInRadius = false;
    }

    Dot.prototype.draw = function() {
      ctx.beginPath();
      ctx.fillStyle = this.color.style;
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
      ctx.fill();
    };

    function createDots() {
      for (let i = 0; i < dots.nb; i++) {
        dots.array.push(new Dot());
      }
    }

    function moveDots() {
      const speedFactor = 0.7;
      for (let i = 0; i < dots.nb; i++) {
        const dot = dots.array[i];
        // Bounce off edges of the canvas, not the window
        if (dot.y < 0 || dot.y > canvas.height) {
          dot.vy = -dot.vy;
        }
        if (dot.x < 0 || dot.x > canvas.width) {
          dot.vx = -dot.vx;
        }
        dot.x += dot.vx * speedFactor;
        dot.y += dot.vy * speedFactor;
      }
    }

    function playChime(dot) {
      if (!audioCtx) return;
      const osc = audioCtx.createOscillator();
      const gainNode = audioCtx.createGain();
      const baseFreq = 100;
      const maxFreq = 250;
      osc.type = 'sine';
      // Map to canvas.height, not window.innerHeight
      const freq = baseFreq + (dot.y / canvas.height) * (maxFreq - baseFreq);
      osc.frequency.setValueAtTime(freq, audioCtx.currentTime);
      osc.frequency.exponentialRampToValueAtTime(freq * 0.8, audioCtx.currentTime + 1.0);

      gainNode.gain.setValueAtTime(0.01, audioCtx.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.002, audioCtx.currentTime + 1.0);

      osc.connect(gainNode);
      gainNode.connect(audioCtx.destination);
      osc.start();
      osc.stop(audioCtx.currentTime + 1.0);
    }

    function connectDots() {
      for (let i = 0; i < dots.nb; i++) {
        for (let j = i + 1; j < dots.nb; j++) {
          const i_dot = dots.array[i];
          const j_dot = dots.array[j];
          if (
            Math.abs(i_dot.x - j_dot.x) < dots.distance &&
            Math.abs(i_dot.y - j_dot.y) < dots.distance
          ) {
            // Check if dot is within the mouse radius
            if (
              Math.abs(i_dot.x - mousePosition.x) < dots.d_radius &&
              Math.abs(i_dot.y - mousePosition.y) < dots.d_radius
            ) {
              if (!i_dot.wasInRadius) {
                playChime(i_dot);
                i_dot.wasInRadius = true;
              }
              ctx.beginPath();
              ctx.strokeStyle = averageColorStyles(i_dot, j_dot);
              ctx.moveTo(i_dot.x, i_dot.y);
              ctx.lineTo(j_dot.x, j_dot.y);
              ctx.stroke();
              ctx.closePath();
            } else {
              i_dot.wasInRadius = false;
            }
          }
        }
      }
    }

    function drawDots() {
      for (let i = 0; i < dots.nb; i++) {
        dots.array[i].draw();
      }
    }

    function animateDots() {
      if (!animateDots.lastTime || Date.now() - animateDots.lastTime >= 1000/60) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        moveDots();
        connectDots();
        drawDots();
        animateDots.lastTime = Date.now();
      }
      requestAnimationFrame(animateDots);
    }

    // Update mouse position relative to the canvas
    $('canvas').on('mousemove', function(e) {
      const rect = canvas.getBoundingClientRect();
      mousePosition.x = e.clientX - rect.left;
      mousePosition.y = e.clientY - rect.top;
    });

    $('canvas').on('mouseleave', function() {
      // Center within the canvas
      mousePosition.x = canvas.width / 2;
      mousePosition.y = canvas.height / 2;
    });

    createDots();
    requestAnimationFrame(animateDots);
  });
</script>
